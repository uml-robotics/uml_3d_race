<!-- Assumes Gazebo is already running -->
<launch>
  <!-- This launch file includes all the nodes needed to setup a simulated obstacle_bot for navigation -->

  <!-- Settings (Robot position args are overidden by spawn_world.launch)-->
  <arg name="x" default="0.0" />
  <arg name="y" default="0.0" />
  <arg name="z" default="0.0" />
  <arg name="yaw" default="0.0" />
  <!-- Rotation in radians. -->
  <arg name="level" default="level1" />
  <arg name="navigate" default="" /> <!-- Not used, just here to prevent extra arg errors -->
  <arg name="3d" default="" /> <!-- Not used, just here to prevent extra arg errors -->

  <!-- model_name determines the topics to be published, and serves as a unique identifier for Gazebo -->
  <arg name="model_type" value="obstacle_bot"   />
  <arg name="model_name" value="obstacle_bot"   />

  <!-- Robot topics -->
  <arg name="laser_topic" value="scan" />
  <arg name="cmd_vel_topic" value="cmd_vel" />
  <arg name="odom_topic" value="odom" />
  <arg name="odom_link" value="$(arg model_name)/odom"/>
  <arg name="base_link" value="$(arg model_name)/base_footprint" />

  
  <!-- The location of the top-level xacro file that defines the robot  -->
  <arg name="model_file" value="$(find uml_3d_race)/resources/models/obstacle_bot/obstacle_bot.xacro" />

  <!-- Load robot_description parameter from top-level pioneer3dx.xacro file -->
  <!-- Also send the model_dir and model_name as arguments to help us generate the model -->
  <param name="$(arg model_name)/robot_description" command="$(find xacro)/xacro --inorder $(arg model_file) model_name:=$(arg model_name)" />

  <!-- publish TFs for static/fixed links (based on the robot_description parameter) -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="state_publisher" output="screen">
    <param name="publish_frequency" type="double" value="30.0"/>
  </node>
  <!-- Without the joint_state_publisher, non-fixed joints that are not published by a plugin
       (i.e. - the swivel_link joint) will not have it's transform published.
       joint_state_publisher also uses the robot_description parameter. -->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_publisher" output="screen"/>

  <!-- Spawn robot into Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="
    -urdf
    -model $(arg model_type)
    -param $(arg model_name)/robot_description
    -x $(arg x)
    -y $(arg y)
    -z $(arg z)
    -Y $(arg yaw)"/>

  <include file="$(find uml_3d_race)/launch/navigation/navigation_obstacle_bot.launch">
    <arg name="namespace" value="$(arg model_name)" />
    <arg name="robot_type" value="$(arg model_type)" />
    <arg name="map" value="$(arg level)" />
    <arg name="init_x" value="$(arg x)" />
    <arg name="init_y" value="$(arg y)" />
    <arg name="init_yaw" value="$(arg yaw)" />
    <arg name="move_base_config" value="2d" />
    <arg name="laser_topic" value="$(arg laser_topic)" />
    <arg name="cmd_vel_topic" value="$(arg cmd_vel_topic)" />
    <arg name="odom_topic" value="$(arg odom_topic)" />
    <arg name="odom_link" value="$(arg odom_link)"/>
    <arg name="base_link" value="$(arg base_link)" />
  </include>

  <!-- Start moving -->
  <node name="obstacle_bot_mover" type="obstacle_bot_node" pkg="uml_3d_race" ns="$(arg model_name)" />

</launch>
