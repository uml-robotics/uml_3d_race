<!-- Assumes Gazebo is already running -->
<launch>
  <!-- Settings (Robot position args are overidden by spawn_world.launch)-->
  <arg name="x" default="0.0" />
  <arg name="y" default="0.0" />
  <arg name="z" default="0.0" />
  <arg name="yaw" default="0.0" />
  <!-- Rotation in radians. -->
  <arg name="level" default="level1" />
  <arg name="navigate" default="true" />
  <arg name="3d" default="true" />

  <!-- model_name determines the topics to be published, and serves as a unique identifier for Gazebo -->
  <arg name="model_name" default="pioneer" />
  <!-- The location of the mesh files for our robot -->
  <arg name="model_dir" default="$(find uml_3d_race)/resources/models/pioneer/meshes" />
  <!-- The location of the top-level xacro file that defines the robot  -->
  <arg name="model_file" default="$(find uml_3d_race)/resources/models/pioneer/defs/pioneer.xacro" />


  <!-- Load robot_description parameter from top-level pioneer3dx.xacro file -->
  <!-- Also send the model_dir and model_name as arguments to help us generate the model -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg model_file) model_dir:=$(arg model_dir) model_name:=$(arg model_name)" />

  <!-- publish TFs for static/fixed links (based on the robot_description parameter) -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="state_publisher" output="screen" ns="$(arg model_name)">
    <remap from="joint_states" to="joint_states" />
    <param name="publish_frequency" type="double" value="30.0"/>
    <param name="tf_prefix" type="string" value="$(arg model_name)"/>
  </node>
  <!-- Without the joint_state_publisher, non-fixed joints that are not published by a plugin
       (i.e. - the swivel_link joint) will not have it's transform published.
       joint_state_publisher also uses the robot_description parameter. -->
  <node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_publisher" output="screen" ns="$(arg model_name)">
    <remap from="joint_states" to="joint_states" />
    <remap from="robot_description" to="/robot_description" />
  </node>

  <!-- Spawn robot into Gazebo -->
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="
    -urdf
    -model $(arg model_name)
    -param /robot_description
    -x $(arg x)
    -y $(arg y)
    -z $(arg z)
    -Y $(arg yaw)"/>

  <!-- Publish robot spawn for resetting to -->
  <node name="spawn_publisher" pkg="uml_3d_race" type="spawn_publisher" output="screen" ns="$(arg model_name)">
    <param name="topic" value="spawn" />
    <param name="x_position" value="$(arg x)" />
    <param name="y_position" value="$(arg y)" />
    <param name="z_rotation" value="$(arg yaw)" />
  </node>

  <!-- Laser filter to remove infinite values from the front facing laser -->
  <!-- http://wiki.ros.org/laser_filters -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain" ns="$(arg model_name)">
    <rosparam command="load" file="$(find uml_3d_race)/resources/config/laserfilter_config.yaml" />
    <remap from="scan" to="frontscan" />
    <remap from="scan_filtered" to="frontscan_filtered" />
  </node>

  <!-- Start Kinect to Laser Converter -->
  <include file="$(find uml_3d_race)/launch/navigation/pcl_to_laser.launch">
    <arg name="robot" value="$(arg model_name)" />
  </include>

  <!-- Start nav stack or mapping mode-->
  <group if="$(arg navigate)">
    <!-- Start Nav Stack -->
    <group if="$(arg 3d)">
      <include file="$(find uml_3d_race)/launch/navigation/navigation_3d.launch">
        <arg name="namespace" value="$(arg model_name)" />
        <arg name="map" value="$(arg level)" />
        <arg name="init_x" value="$(arg x)" />
        <arg name="init_y" value="$(arg y)" />
        <arg name="init_yaw" value="$(arg yaw)" />
        <arg name="has_laser" value="true" />
      </include>
    </group>
    
    <group unless="$(arg 3d)">
      <include file="$(find uml_3d_race)/launch/navigation/navigation.launch">
        <arg name="namespace" value="$(arg model_name)" />
        <arg name="map" value="$(arg level)" />
        <arg name="init_x" value="$(arg x)" />
        <arg name="init_y" value="$(arg y)" />
        <arg name="init_yaw" value="$(arg yaw)" />
        <arg name="move_base_config" value="default" />
      </include>
    </group>
  </group>

  <group unless="$(arg navigate)">
    <!-- Start Mapping -->
    <include file="$(find uml_3d_race)/launch/navigation/map_teleop.launch">
      <arg name="robot" value="$(arg model_name)" />
      <arg name="map" value="$(arg level)" />
      <arg name="static_2d_map" value="false" />
      <arg name="3d" value="true" />
      <arg name="init_x" value="$(arg x)" />
      <arg name="init_y" value="$(arg y)" />
      <arg name="init_yaw" value="$(arg yaw)" />
    </include>
  </group>

</launch>
